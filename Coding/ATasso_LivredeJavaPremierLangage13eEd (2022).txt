Apprendre Java en douceur
Vous avez décidé de vous initier à la programmation et souhaitez opter pour un langage largement utilisé dans le monde professionnel ? Java se révèle un choix idéal comme vous le constaterez dans ce livre conçu pour les vrais débutants en programmation.

Vous apprendrez d'abord, à travers des exemples simples en Java, à maîtriser les notions communes à tous les langages : variables, types de données, boucles et instructions conditionnelles, etc. Vous franchirez un nouveau pas en découvrant par la pratique les concepts de la programmation orientée objet (classes, objets, héritage), puis le fonctionnement des librairies graphiques AWT et Swing (fenêtres, gestion de la souris, tracé de graphiques). Cet ouvrage vous expliquera aussi comment réaliser des applications Java dotées d'interfaces graphiques conviviales grâce au logiciel libre NetBeans (version 11). Enfin, vous vous initierez au développement d'applications avec l'interface Android Studio.

Chaque chapitre est accompagné de deux types de travaux pratiques : des exercices, dont le corrigé est fourni sur l'extension web du livre, et un projet développé au fil de l'ouvrage, qui vous montrera comment combiner toutes les techniques de programmation étudiées pour construire une véritable application Java.

À qui s'adresse ce livre ?
Aux étudiants de 1er cycle universitaire (IUT, Deug...) ou d'écoles d'ingénieurs
Aux vrais débutants en programmation : passionnés d'informatique et programmeurs autodidactes, concepteurs de sites Web souhaitant aller au-delà de HTML et JavaScript, etc.
Aux enseignants et formateurs recherchant une méthode pédagogique et un support de cours pour enseigner Java à des débutants

p.24  Avant de réaliser une application concrète, telle que celle proposée en projet
 dans cet ouvrage, nécessairement complexe par la diversité des tâches
 qu’elle doit réaliser, simplifions-nous la tâche en ne cherchant à résoudre
 qu’un problème à la fois.
 Considérons que créer une application, c’est décomposer cette dernière en
 plusieurs sous-applications qui, à leur tour, se décomposent en micro
applications, jusqu’à descendre au niveau le plus élémentaire. Cette
 démarche est appelée analyse descendante. Elle est le principe de base de
 toute construction algorithmique

p.26 Ordonner la liste des opérations

p.29  Un ordinateur est composé de deux parties distinctes, la mémoire centrale
 et l’unité centrale.
 La mémoire centrale permet de mémoriser toutes les informations
 nécessaires à l’exécution d’un programme. Ces informations correspondent
 à des données ou à des ordres à exécuter (instructions). Les ordres placés
 en mémoire sont effectués par l’unité centrale, la partie active de
 l’ordinateur.
 Lorsqu’un ordinateur exécute un programme, son travail consiste en grande
 partie à gérer la mémoire, soit pour y lire une instruction, soit pour y
 stocker une information. En ce sens, nous pouvons voir l’ordinateur comme
 un robot qui sait agir en fonction des ordres qui lui sont fournis. Ces
 actions, en nombre limité, sont décrites ci-après.

p.32  Un programme est essentiellement un outil qui traite l’information. Cette
 information est transmise à l’ordinateur par l’utilisateur. L’information est
 saisie par l’intermédiaire du clavier ou de la souris. Cette transmission de
 données à l’ordinateur est appelée communication d’entrée (input en
 anglais). On parle aussi de saisie ou encore de lecture de données.
 Après traitement, le programme fournit un résultat à l’utilisateur, soit par
 l’intermédiaire de l’écran, soit sous forme de fichiers, que l’on peut ensuite
 imprimer. Il s’agit alors de communication de sortie (output) ou encore
 d’affichage ou d’écriture de données.

p.34  Le code binaire associé à chaque code d’opération (addition, test, etc.) n’est pas nécessairement
 identique d’un ordinateur à un autre. Ce code binaire est déterminé par le constructeur de
 l’ordinateur. De ce fait, une instruction telle que l’addition de deux nombres n’a pas le même code
 binaire d’une machine à une autre. Il existe donc, pour un même programme, un code binaire qui
 diffère suivant le type d’ordinateur utilisé.

p.41  
 public class Cercle
 {
public static void main(String [] arg)
 {...}}

 System.out.println(''...'');    (bibliothèque system)

p.62  Une variable permet la manipulation de données et de valeurs. Elle est
 caractérisée par les éléments suivants :
 • Un nom, qui sert à repérer un emplacement en mémoire dans lequel une
 valeur est placée. Le choix du nom d’une variable est libre. Il existe
 cependant des contraintes, que nous présentons à la section « Les noms
 de variables ».
 • Un type, qui détermine la façon dont est traduite la valeur en code
 binaire ainsi que la taille de l’emplacement mémoire. Nous examinons
 ce concept à la section « La notion de type ». Plusieurs types simples
 sont prédéfinis dans le langage Java, et nous en détaillons les
 caractéristiques à la section « Les types de base en Java »

p.88  Le cast
 La conversion avec perte d’information est autorisée dans certains cas grâce
 au mécanisme du cast. Il peut être utile de transformer un nombre réel en
 entier, par exemple pour calculer sa partie entière. Pour cela, le compilateur
 demande de convertir explicitement les termes de l’opération dans le type
 souhaité en plaçant devant la variable ou l’opération le type de conversion
 désiré. Ainsi, pour transformer un float en int, il suffit de placer le terme
 (int) devant la variable ou l’opération de type float  

p.110  Java est un langage conçu avant tout pour être exécuté dans un
 environnement Internet et utilisant des programmes essentiellement axés
 sur le concept d’interface graphique (gestion des boutons, menus, fenêtres,
 etc.). Dans ce type d’environnement, la saisie de données est gérée par des
 fenêtres spécialisées, appelées fenêtres de dialogue.
 L’objectif de cet ouvrage est d’initier le lecteur au langage Java et, surtout,
 de lui faire comprendre comment construire et élaborer un programme.
 Pour cet apprentissage (algorithme et langage), il n’est pas recommandé de
 se lancer dans l’écriture de programmes utilisant des boutons, des menus et
 autres fenêtres sans avoir étudié au préalable toute la bibliothèque AWT
 (Abstract Windowing Toolkit) de Java. Cette bibliothèque facilite, il est vrai,
 la construction d’applications graphiques, mais elle complique et alourdit
 l’écriture des programmes.
 Dans cet environnement, le langage Java propose la fonction
 System.in.read(), qui permet la saisie de données au clavier, sans
 l’intermédiaire de fenêtres graphiques. 

p.135  Dans le langage Java, le point-virgule constitue une instruction à part
 entière, qui représente l’instruction vide. Par conséquent, écrire le
 programme suivant ne provoque aucune erreur à la compilation :
 if (première > deuxième) ;
 System.out.println(deuxième + "  " + première) ;

p.149 La notion de répétition est une des notions fondamentales de la
 programmation. En effet, beaucoup de traitements informatiques sont
 répétitifs. Par exemple, la création d’un agenda électronique nécessite de
 saisir un nom, un prénom et un numéro de téléphone autant de fois qu’il y a
 de personnes dans l’agenda.
 Dans de tels cas, la solution n’est pas d’écrire un programme qui comporte
 autant d’instructions de saisie qu’il y a de personnes mais de faire répéter
 par le programme le jeu d’instructions nécessaires à la saisie d’une seule
 personne. Pour ce faire, le programmeur utilise des instructions spécifiques,
 appelées structures de répétition, ou boucles, qui permettent de déterminer
 la ou les instructions à répéter.

p.173 
rappel: boucle for sur java
for (initialisation; condition; incrément)
 {
 }
 plusieurs instructions ;

p.188  Définir les paramètres
 Pour éviter d’avoir à recopier chaque fois des marches à suivre qui ne
 diffèrent que sur un détail, l’idée est de construire un algorithme général.
 Cet algorithme ne varie qu’en fonction d’ingrédients déterminés, qui font
 que le programme donne un résultat différent.
 En généralisant l’algorithme du thé ou du café chaud, on exprime une
 marche à suivre permettant de réaliser une boisson chaude. Pour obtenir un
 résultat différent (café ou thé), il suffit de définir comme paramètre de
 l’algorithme l’ingrédient, café ou thé, à choisir.
 La marche à suivre s’écrit en remplaçant les mots café ou thé par le mot
 ingrédient

p.191 La bibliothèque Math
 La bibliothèque mathématique du langage Java est composée d’un
 ensemble de fonctions prédéfinies, qui permettent de calculer toutes sortes
 d’équations mathématiques. Parmi ces fonctions, se trouvent les fonctions
 trigonométriques (sinus, cosinus, tangente, etc.), logarithmiques, d’arrondis,
 de calcul de puissances ou de racines carrées.
 Ces fonctions sont regroupées dans la bibliothèque de programmes Math. Le
 nom de chaque fonction débute toujours par le terme Math, suivi d’un point
 puis du nom de la fonction

p.198 Nous appelons donc la fonction qui réalise ce calcul, c’est-à-dire
 périmètre().
 L’instruction résultat = Math.sqrt(a) ; calcule la racine carrée du nombre a,
 dont la valeur a été saisie au clavier à l’instruction précédente. Elle place
 ensuite le résultat de ce calcul dans la variable résultat.
 En modifiant le nom d’appel de la fonction Math.sqrt() par périmètre(), nous
 obtenons un programme qui appelle la fonction périmètre() et qui, par
 conséquent, calcule le périmètre d’un cercle dont la valeur du rayon a, est
 saisie au clavier. La valeur du périmètre est placée dans la variable résultat
 par l’intermédiaire du signe d’affectation =.

p.204 Spécifier le type de la valeur retournée dans l’en-tête de la fonction.
 Pour notre exemple, la valeur retournée est contenue dans la variable p
 de type double. C’est pourquoi l’en-tête de la fonction s’écrit :
 public static double périmètre (int r)

p.208 différentes formes d'une fonction:
Fonction avec résultat
Fonction sans résultat
Fonction à plusieurs paramètres
Fonction paramètre

p.218  La création et l’utilisation de fonctions dédiées à la résolution d’un
 problème donné sont, nous l’avons observé au chapitre précédent, des
 opérations fondamentales, qui permettent le développement de logiciels
 dont le code source est facilement réutilisable.
 Ces fonctions transforment la structure générale des programmes et
 apportent, de ce fait, de nouveaux concepts, qu’il est important de bien
 maîtriser avant d’étudier la programmation objet.

p.219  1. Un programme contient :– une fonction principale, appelée fonction main() ;– un ensemble de fonctions définies par le programmeur ;– des instructions de déclaration de variables.
 2. Les fonctions contiennent :– des instructions de déclaration de variables ;– des instructions élémentaires (affectation, test, répétition, etc.) ;– des appels à des fonctions, prédéfinies ou non.
 3. Chaque fonction est comparable à une boîte noire, dont le contenu n’est
 pas visible en dehors de la fonction.

p.265 La construction
 d’une classe est réalisée selon les deux principes suivants :
 1. Définition des données à l’aide d’instructions de déclaration de
 variables et/ou d’objets. Ces variables sont de type simple, tel que nous
 l’avons utilisé jusqu’à présent (int, char, etc.) ou de type composé,
 prédéfini ou non (String, etc.).
 Ces données décrivent les informations caractéristiques de l’objet que
 l’on souhaite définir. Elles sont aussi appelées communément champ,
 attribut ou membre de la classe.
 2. Construction des méthodes définies par le programmeur. Ce sont les
 méthodes associées aux données. Elles se construisent comme de
 simples fonctions, composées d’un en-tête et d’instructions, comme
 nous l’avons vu aux chapitres précédents.
 Ces méthodes représentent tous les traitements et comportements de
 l’objet que l’on cherche à décrire.

p.288 La communica on objet
 En définissant un type ou une classe, le développeur crée un modèle, qui
 décrit les fonctionnalités des objets utilisés par le programme. Les objets
 sont créés en mémoire à partir de ce modèle, par copie des données et des
 méthodes.
 Cette copie est réalisée lors de la réservation des emplacements mémoire
 grâce à l’opérateur new, qui initialise les données de l’objet et fournit, en
 retour, l’adresse où se trouvent les informations stockées.
 La question est de comprendre pourquoi l’interpréteur réalise cette copie en
 mémoire, alors que cela lui était impossible auparavant.
 Les données sta c
 La réponse à cette interrogation se trouve dans l’observation des différents
 programmes proposés dans ce manuel (voir les chapitres 6, « Fonctions,
 notions avancées », et 7, « Les classes et les objets »). Comme nous l’avons
 déjà constaté (voir, au chapitre précédent, la section « Construire et utiliser
 ses propres classes »), le mot-clé static n’est plus utilisé lors de la
 description d’un type, alors qu’il était présent dans tous les programmes
 précédant ce chapitre.
 C’est donc la présence ou l’absence de ce mot-clé qui fait que l’interpréteur
 construise ou non des objets en mémoire.

p.343  Le fait de déclarer autant de variables qu’il y a de valeurs présente les
 inconvénients suivants :
 • Si le nombre de notes est modifié, il est nécessaire de :– Déclarer de nouvelles variables.– Placer ces variables dans le programme, afin de les traiter en plus
 des autres notes.– Compiler à nouveau le programme pour que l’interpréteur puisse
 prendre en compte ces modifications.
 • Il faut trouver un nom de variable pour chaque valeur traitée. Imaginez
 déclarer 1 000 variables portant un nom différent !
 Ces inconvénients majeurs sont résolus grâce aux tableaux. En effet, les
 tableaux sont des structures de données qui regroupent sous un même nom
 de variable un nombre donné de valeurs de même type. Les tableaux sont
 proposés par tous les langages de programmation. Ils sont construits par
 assemblage d’une suite finie de cases mémoire, comme illustré à la figure
 9-1

p.345  Un tableau est un ensemble de cases mémoire. Chaque case constituant un
 élément du tableau est identique à une variable. Il est possible de manipuler
 chaque case du tableau de façon à :
 • placer une valeur dans une case du tableau à l’aide de l’affectation ;
 • utiliser un élément du tableau dans le calcul d’une expression
 mathématique ;
• afficher un élément du tableau.

p.351  public static void main(String [] argument)
 Cette instruction correspond à la définition de l’en-tête de la fonction main().
 Vous êtes en mesure maintenant de déchiffrer chacun de ses termes pour en
 comprendre l’utilité :
 • Le mot-clé public précise au compilateur que la fonction main() est
 accessible depuis l’extérieur de la classe où elle est définie. En
 particulier, l’interpréteur Java peut y accéder pour l’exécuter.
 • Le terme static explique que la fonction main() ne peut pas être copiée
 plusieurs fois en mémoire. Elle ne peut pas être associée à un objet ni
 être 
instanciée, c’est-à-dire qu’il n’est pas possible d’écrire
 unObjet.main().
 • La fonction main() ne fournit pas de résultat, et c’est pourquoi elle est
 définie comme void.
 • Pour finir, elle possède, entre (), un paramètre défini comme tableau de
 type String. Ce paramètre est utilisé pour passer des données en ligne de
commande lors du lancement de la commande d’exécution du
 programme

p.384 À la différence de la programmation statique, dans laquelle le nombre de
 données géré par l’application est fixé une fois pour toutes lors de
 l’exécution du programme, la programmation dynamique offre l’avantage
 de gérer un nombre indéterminé d’objets, en réservant des espaces
 mémoire, au fur et à mesure des besoins de l’utilisateur.
 Cette technique se montre très utile lorsque le nombre d’objets à traiter
 n’est pas connu ni définissable avant l’exécution du programme. Par
 exemple, tous les logiciels de gestion, et c’est une grande part des
 programmes informatiques, se doivent de gérer les données qu’ils traitent
 de façon dynamique.
 En effet, sans programmation dynamique, vous pourriez voir une
 bibliothèque refuser de nouveaux lecteurs sous prétexte que le logiciel
 qu’elle utilise ne serait pas en mesure de traiter plus de 50 000 inscriptions,
 ou encore voir un logiciel de traitement de texte s’interrompre parce qu’il
 lui serait impossible de gérer la saisie et l’affichage de plus 10 000
 caractères.
 Pour éviter de telles situations, le langage Java propose différents outils qui
 gèrent dynamiquement les données d’un programme. En particulier, il
 existe des objets de type ArrayList, dont nous analysons les caractéristiques à
 la section « Les listes ». Les objets de type HashMap, étudiés à la section « Les
 dictionnaires », offrent aussi l’avantage de gérer les données de façon
 dynamique, tout en organisant l’information de façon à faciliter son
 exploitation.

p.383 Les listes
 Les listes sont des objets de type ArrayList, un type prédéfini du langage
 Java. La gestion des listes est assez similaire à la gestion d’un tableau
 puisque le programme crée une liste par ajout de données au fur et à mesure
 des besoins de l’utilisateur. Les données sont enregistrées dans leur ordre
 d’arrivée. Un indice géré par l’interpréteur permet de retrouver
 l’information.
 Les données enregistrées dans une ArrayList sont en réalité rangées dans un
 tableau interne créé par l’interpréteur. La taille du tableau interne est gérée
automatiquement par Java. Ainsi, lorsque la liste des éléments à ajouter
 dépasse la taille du tableau interne, un nouveau tableau est créé et les
 anciennes valeurs y sont copiées.

p.422  Les instructions qui composent le bloc try (en français essayer) sont
 exécutées.
 • Si aucune erreur n’est transmise par les différents constructeurs qui
 réalisent l’ouverture du fichier, le programme sort de la méthode ouvrir()
 en retournant un booléen de valeur égale à true.
 • Si une erreur est propagée par l’un des constructeurs, les instructions
 placées dans le bloc catch (capture) sont exécutées, à condition que
 l’erreur détectée soit du même type que celui placé entre parenthèses
 derrière le terme catch. L’erreur FileNotFoundException étant du type
 IOException, le programme sort de la méthode ouvrir(), en retournant un
 booléen de valeur égale à false. Aucun fichier n’est donc ouvert.

p.487 Les outils d’aide à la création d’interfaces graphiques sont appelés dans le
 monde informatique, des IDE (Integrated Development Environment) que
 l’on traduit en français par Environnement de développement intégré (EDI).

p.596 La création et l’exécution d’une application Android s’effectuent dans le
 cadre d’un projet Android Studio au sein duquel sont regroupées toutes les
 ressources nécessaires à la bonne marche de l’application.
 Pour créer un projet Android, une fois l’IDE Android Studio installée et
 lancée, vous devez cliquer sur la rubrique « Start a new Android Studio
 project » (figure 13-1) sur le panneau d’accueil ou sélectionner l’item
 Nouveau projet du menu Fichier, si d’autres projets sont déjà ouverts.
 Dans la boîte de dialogue Create New Project qui apparaît (figure 13-2)
 vous devez choisir un modèle de présentation pour votre application
 (Template). Sélectionnez Empty Activity puis cliquez sur Next.
 L’étape suivante consiste à (figure 13-3) :
 1. Saisir le nom de l’application (ici, BonjourLeMonde).
 2. Définir le nom du package (ici, com.example.bonjourlemonde).
 3. Si le dossier d’enregistrement du projet indiqué par défaut ne vous
 convient pas, spécifier un autre emplacement en cliquant sur la petite
 icône représentant un dossier présent sur la ligne Save location.
 4. Définir le langage de programmation à Java.
5. Déterminer le niveau de l’API Android que vous souhaitez utiliser pour
 votre projet. Le niveau de l’interface de programmation (API) évolue à
 chaque nouvelle version d’Android.
 6. Valider l’enregistrement du projet en cliquant sur le bouton Finish

p.599-600  Arborescence du projet Android
 Quelle que soit l’interface de développement utilisée, un projet de type
 Android possède une structure bien définie. Grâce à cette hiérarchie, les
 ressources et les codes sources sont facilement repérables, et le projet
 devient plus lisible puisque bien organisé.
 L’arborescence automatiquement générée par Android Studio se présente
 sous la forme suivante (figure 13-4, repères  à ).
 Le répertoire Java contient toutes les classes Java nécessaires au bon
 fonctionnement de l’application. La classe principale, créée en même
temps que le projet, est visible en double-cliquant sur la ressource
 MainActivity située dans l’arborescence du projet. Nous examinerons ce
 fichier plus en détail à la section « Les classes Java ».
 Le répertoire res contient des sous-répertoires dans lesquels sont
 enregistrées toutes les ressources utiles à l’application, comme des
 images (drawable) ou des fichiers descriptifs des composants
 d’affichage utilisés par l’application (layout). Il contient également des
 valeurs textuelles (values). Ces éléments seront détaillés à la section
 « Les fichiers ressources ».
 Le répertoire manifests contient des fichiers importants dont
 AndroidManifest.xml dans lequel sont définis les activités et services
 proposés par l’application. Nous examinerons son utilité dans la section
 « L’application Liste de courses » à la fin de ce chapitre.
 Compila on et exécu on de projet
 Une fois le projet compilé en cliquant sur le triangle vert proposé par
 l’interface, Android Studio lance l’exécution de l’application en ouvrant
 l’émulateur Android défini lors de la création du projet (voir section
 « Développer des applications Android avec Android Studio – Créer un
 émulateur Android », dans l’annexe Guide d’installations en fin d’ouvrage).
 Une fois ouvert, le téléphone affiche l’application BonjourLeMonde (figure 13
5)

p.602  XML en quelques mots
 L’utilisation d’un fichier au format XML permet de simplifier la façon
 d’agencer les composants au sein d’une application Android.
 En effet, le format XML (eXtensible Markup Language) est un langage de
 description de données. Grâce à sa structure, il permet d’organiser les
 données en les nommant et en les ordonnant selon une hiérarchie qui décrit
 l’agencement des composants au sein de l’application

p.642 Déposer une applica on Android sur un serveur
 dédié
 Pour mettre à disposition votre application sur Internet, vous devez réaliser
 un certain nombre d’opérations. Commencez par vous inscrire sur la plate
forme Android (voir section suivante « Créer un compte développeur »),
 puis transformez votre projet Android Studio en application Android à part
 entière (voir section suivante « Passer du projet à l’application »). Une fois
 cela effectué, vous pourrez déposer l’application sur le site Google Play
 (voir section suivante « Déposer une application »).
 Créer un compte développeur
 Pour 
créer 
un 
compte développeur, rendez-vous sur le site
 http://play.google.com/apps/publish, en vous connectant obligatoirement
 avec votre adresse Gmail.
 Pour créer votre profil développeur, vous devez compléter le formulaire de
 la page d’accueil (figure 13-20). Une fois les champs correctement remplis,
 cliquez sur Poursuivre et payer
