Chapter 1 Planning and Engagement . ............................................................. 1
Governance, Risk, and Compliance . ...................................... 1
Regulatory and Compliance Considerations . ....................... 2
Testing Limitations . ................................................................ 6
Time-Based Limitations . .............................................................. 6
Asset Scope Limitations . ................................................................ 7
Tool Limitations . .......................................................................... 7
Allowed and Disallowed Tests . ...................................................... 8
Contracts and Documentation . .............................................. 8
Master Services Agreement . .......................................................... 9
Nondisclosure Agreement . ............................................................ 9
Statement of Work . ...................................................................... 9
Rules of Engagement . .................................................................... 10
Permission to Test . ........................................................................ 10
Scope and Requirements . ............................................................... 11
Standards . 11
Environmental Considerations for Scoping . 18
Target Selection . 19
Contract Review . 23
Communication Planning . 25
Professionalism and Integrity . 26
Communication . 27
Integrity . 29
Risks to the Tester . 30
Chapter Review . 30
Questions . 31
Answers . 32
References . 33
Chapter 2 Information Gathering and Vulnerability Scanning .
35
Passive Reconnaissance . 36
DNS Recon . 36
OSINT . 44
Search Engines . 51
Active Reconnaissance . 58
Host Enumeration . 58
Service Identification and Fingerprinting . 62
Web Content Enumeration . 68
User Enumeration . 71
Defense Detection and Detection Avoidance . 73
Vulnerability Scanning and Analysis . 78
Credentialed vs. Noncredentialed Scanning . 79
Compliance and Configuration Auditing . 81
Vulnerability Research Sources . 82
Chapter Review . 85
Questions . 85
Answers . 87
References . 87
Chapter 3 Network-Based Attacks .
89
Name Resolution Exploits . 89
DNS Spoofing and Cache Poisoning . 91
Attacking LLMNR and NetBIOS . 94
Password Attacks . 99
Brute-Force and Dictionary Attacks . 100
Password Spraying . 101
Hash Cracking . 101
Stress Testing Applications and Protocols . 105
Network Packet Manipulation . 108
Analyzing and Inspecting Packets . 108
Forge and Decode Packets . 109
Layer 2 Attacks . 111
Attacking the Spanning Tree Protocol . 111
VLAN Hopping . 113
Bypassing Network Access Controls . 114
Researching an Attack . 114
An Attack on FTP . 114
An Attack on Samba and NFS . 116
Chapter Review . 119
Questions . 120
Answers . 121
Chapter 4 Wireless and RF Attacks .
123
802.11 Wireless . 123
Wireless Networking Overview . 123
Wireless Testing Equipment . 131
Attacking Wireless . 132
Attacking Bluetooth . 148
Bluetooth Specifications . 148
Device Discovery . 149
Bluetooth Attacks . 149
RFID and NFC . 150
Chapter Review . 153
Questions . 153
Answers . 155
References . 156
Chapter 5 Web and Database Attacks .
157
OWASP Top Ten . 157
Injection Attacks . 157
Command Injection . 158
SQL Injection . 161
LDAP Injection . 168
Cross-Site Scripting . 169
Cross-Site Request Forgery . 171
Attacking Authentication and Session Management . 173
Brute-Force Login Pages . 173
Session Management Testing . 176
Data Exposure and Insecure Configuration . 180
Weak Access Controls . 181
Exposing Sensitive Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
Directory and Path Traversals . 184
Sensitive Data Exposure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
Inclusion Attacks . 188
Race Conditions . 189
Chapter Review . 189
Questions . 190
Answers . 192
Chapter 6 Attacking the Cloud .
195
Account and Privilege Attacks . 196
Credential Harvesting . 196
Privesc . 197
Account Takeover . 202
Password Spraying . 202
Misconfigured Cloud Assets . 203
Identity and Access Management . 203
Federation . 205
Object Storage . 205
Containerization Technologies . 208
Cloud-Centric Attacks . 209
Denial of Service . 209
Cloud Malware Injection . 210
Side-Channel Attacks . 211
Software Development Kits . 211
Chapter Review . 213
Questions . 213
Answers . 214
Chapter 7 Specialized and Fragile Systems . 215
Mobile Devices . 216
Testing Concepts . 216
Mobile Hardware . 218
Mobile Operating Systems Overview . 219
Mobile Applications Overview . 221
Testing iOS . 224
Testing Android . 230
Virtual and Containerized Systems . 239
Other Nontraditional Systems . 240
SCADA and Industrial Control Systems . 240
Embedded Systems . 243
Chapter Review . 243
Questions . 244
Answers . 246
Chapter 8 Social Engineering and Physical Attacks . 249
Physical Security and Social Engineering . 250
Pretexting and Impersonation . 254
Methods of Influence . 255
Social Engineering and Physical Attacks . 255
Phishing Attacks . 256
Other Web Attacks . 259
Social Engineering Tools . 260
Dumpster Diving . 265
USB Dropping . 265
Shoulder Surfing . 265
Tailgating . 266
Badges . 266
Basic Physpen Tools . 266
Countermeasures . 267
Chapter Review . 268
Questions . 269
Answers . 271
References . 271
Chapter 9 Post-Exploitation . 273
Enumeration . 273
Discovery . 274
Credential Access . 279
Privilege Escalation . 287
Linux Privilege Escalation . 288
Windows Privilege Escalation . 295
Covert Channels and Data Exfiltration . 305
SSH Tunneling . 306
Shell Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
Command and Control . 308
Data Exfiltration . 309
Lateral Movement . 309
Living Off the Land . 309
Passing the Hash . 310
RPC/DCOM . 311
Remote Desktop Protocol . 312
WinRM . 312
Maintaining Persistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313
Windows . 314
Linux . 315
Covering Your Tracks . 316
Clearing Command History . 316
Timestomping . 317
File Deletion . 319
Chapter Review . 319
Questions . 320
Answers . 322
Chapter 10 Post-Engagement Activities .
323
The Anatomy of a Pentest Report . 323
Reporting Audience . 324
Report Contents . 325
Storage and Secure Distribution . 332
Attestations . 333
Findings, Recommendations, and Analysis . 333
Recommendations . 337
Common Themes and Root Causes . . . . . . . . . . . . . . . . . . . . 340
Post-Engagement Activities . 341
Cleanup . 342
Client Acceptance . 342
Lessons Learned . 342
Retesting and Follow-up . 343
Chapter Review . 343
Questions . 343
Answers . 345
References . 345
Chapter 11 Tools and Code Analysis .
347
Logic Constructs . 347
Conditionals . 348
Loops . 349
Boolean Operators . 349
Arithmetic and String Operators . 350
Data Structures . 351
Key Values and Keys . 351
Arrays, Dictionaries, and Lists . 352
Trees . 352
CSV, XML, and JSON . 352
Other Programming Concepts . 354
Procedures . 354
Functions . 355
Classes . 356
Libraries . 357
Practical Examples . 357
Bash . 358
Python . 360
Perl . 361
Ruby . 362
JavaScript . 363
PowerShell . 364
Specialized Examples . 365
Bash Shells . 365
Bash Automation . 366
PowerShell Shells . 368
PowerShell: Enumerating AD Users and Computers . 369
Python Port Scanner . 370
Python Encoding . 372
Using Python to Upgrade to a Fully Interactive Shell . 372
Using Perl to Modify IP Addresses in a File . 373
Perl Reverse Shell . 374
JavaScript Downloader . 374
Chapter Review . 375
Questions . 376
Answers . 377
Chapter 12 Tools Inventory .
379
Appendix A Objective Map .
397
Objective Map: Exam PT0-002 . 397
Appendix B About the Online Content .
399
System Requirements . 399
Your Total Seminars Training Hub Account . 399
Privacy Notice . 399
Single User License Terms and Conditions . 399
TotalTester Online . 401
Other Book Resources . 401
Performance-Based Questions . 401
Downloadable Content . 402
Technical Support . 402

p.18 Why CompTIA PenTest+? The CompTIA PenTest+ exam evaluates testing candidates in five specific domain areas: Planning and Scoping, Information Gathering and 
Vulnerability Scanning, Attacks and Exploits, Reporting and Communication, and 
Tools and Code Analysis.

p.19 CompTIA PenTest+ Exam: PT0-002
Domain Percentage of Examination
1.0 Planning and Scoping 14%
2.0 Information Gathering and Vulnerability Scanning 22%
3.0 Attacks and Exploits 30%
4.0 Reporting and Communication 18%
5.0 Tools and Code Analysis 16%

p.22 Governance, risk, and compliance (GRC) describes the processes, tools, and strategies 
that organizations use to address compliance with industry regulations, enterprise risk 
management, and internal governance. Penetration tests are often used to examine risk 
and comply with legal and regulatory requirements for testing. Pentests practically evaluate an organization’s security regarding their processing and handling of protected data. 
It is important for you to understand how pentesting fits within GRC, as it may affect 
various elements of the testing effort
NOTE The GRC model is defined by the OCEG
. ISACA (https://
www.isaca.org), NIST (https://nist.gov), and the International Organization 
for Standardization (https://www.iso.org) can provide additional information 
on how to properly implement and manage GRC.

p.23 Personally identifiable information (PII) or personal information is generally data 
that allows identification of one individual over other individuals.
Protected health information (PHI) is similar to PII, but it applies to data that 
was created or used in a health care context.
Cardholder data (CHD) is often specific to Payment Card Industry Data Security 
Standards (PCI-DSS). 

p.26 PCI-DSS
In an effort to combat financial crime, the major payment card brands (Visa, MasterCard, American Express, Discover, and JCB) established the Payment Card Industry 
Security Standards Council (PCI-SSC)5
 to define a series of rules that businesses that 
process payments using payment cards should follow in order to better secure card data 
and transactions. The resulting standard is called PCI-DSS.

p.30 A master services agreement (MSA) is a type of overarching contract reached between 
two or more parties where each party agrees to most terms that will govern all other 
future transactions and agreements. The agreement will cover conditions such as:
•	 Payment terms Negotiated schedule of payment
•	 Product warranties Assurance that a product meets certain conditions 
•	 Intellectual property ownership Copyrights, patents, and trademarks
•	 Dispute resolution Defines a process for resolving differences
•	 Allocation of risk Provision that defines levels of responsibility between 
each party
•	 Indemnification Parties agree to be financially responsible in certain 
circumstances
Nondisclosure agreement (nda)
Statement of work (sow)
The statement of work typically addresses 
the following subjects:
•	 Purpose Reason for the project
•	 Scope of work Describes the work activities to be completed
•	 Location of work Where the work will be performed
•	 Period of performance The timeline for the project
•	 Deliverables schedule Defines the project artifacts and due dates
•	 Applicable industry standards Relevant criteria that must be followed
•	 Acceptance criteria Conditions that must be satisfied
•	 Special requirements Travel, workforce requirements (certifications, education)
•	 Payment schedule Negotiated schedule of payment (possibly derived from MSA)
+RoE: rules of engagement

p.34 OWASP TOP 10:
A1:2017-
Injection
Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent
to an interpreter as part of a command or query. The attacker's hostile data can trick the
interpreter into executing unintended commands or accessing data without proper authorization.
 
A2:2017-
Broken
Authentication 
Application functions related to authentication and session management are often implemented
incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit
other implementation flaws to assume other users' identities temporarily or permanently.

A3:2017-
Sensitive Data
Exposure
Many web applications and APls do not properly protect sensitive data, such as financial,
healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit 
card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra
protection, such as encryption at rest or in transit, and requires special precautions when 
exchanged with the browser

A4:2017-
XML External
Entities (XXE)
Many older or poorly configured XML processors evaluate external entity references within XML
documents. External entities can be used to disclose internal files using the file URI handler,
internal file shares, internal port scanning, remote code execution, and denial of service attacks.

A5:2017-
Broken
Access Control
Restrictions on what authenticated users are allowed to do are often not properly enforced. 
Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access
other users' accounts, view sensitive files, modify other users' data, change access rights, etc.

A6:2017-
Security
Misconfiguration
Security misconfiguration is the most commonly seen issue. This is commonly a result of insecure 
default configurations, incomplete or ad-hoc configurations, open cloud storage, misconfigured
HTTP headers, and verbose error messages containing sensitive information. Not only must all 
operating systems, frameworks, libraries, and applications be securely configured, but they must
be patched and upgraded in a timely fashion.

A7:2017-
Cross-Site
Scripting (XSS)
XSS flaws occur whenever an application includes untrusted data in a new web page without
proper validation or escaping, or updates an existing web page with user-supplied data using a
browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the
victim's browser, which can hijack user sessions, deface web sites, or redirect the user to
malicious sites.

A8:2017-
Insecure
Deserialization
Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not
result in remote code execution, they can be used to perform attacks, including replay attacks,
injection attacks, and privilege escalation attacks.

A9:2017-
Using Components
with Known
Vulnerabilities
Components, such as libraries, frameworks, and other software modules, run with the same 
privileges as the application. If a vulnerable component is exploited, such an attack can facilitate
serious data loss or server takeover. Applications and APls using components with known
vulnerabilities may undermine application defenses and enable various attacks and impacts

A10:2017-
Insufficient
Logging &
Monitoring
Insufficient logging and monitoring, coupled with missing or ineffective integration with incident
response, allows attackers to further attack systems, maintain persistence, pivot to more systems,
and tamper, extract, or destroy data. Most breach studies show time to detect a breach is over 
200 days, typically detected by external parties rather than internal processes or monitoring

STANDARDS: MITRE ATT&CK, OWASP, NIST, OSSTMM, PTES, ISSAF

p.46 SLA -> service level agreement

p.57 Passive Reconnaissance: It is the process of assessing 
a target to collect preliminary knowledge about the system, software, network, and 
people without actively engaging a target or its assets. This form of information gathering 
is the least invasive, and it is the least likely to be detected by the target. It is appropriate to use these methods to verify scope and aid with planning a pentest, as well 
as initial discovery during your pentest. Both paid and public sources of information 
(open-source intelligence) can be used according to your budget and resources. Use 
passive information gathering when you cannot risk disruption or detection during the 
current phase of your pentest.

p.79 Active Reconnaissance
Passive reconnaissance has its limits. If we extend our earlier example for home maintenance, you will eventually need to engage with the contractor directly. You need to 
know when they are available, if they have the tools and expertise to perform your 
specific house repair, how much they charge, or even if they’re willing to do the work! 
You’ll probably have to interact with them directly at this point and have conversations 
and other interactions to get more information.
In pentesting, this would be active information gathering. You are actively engaging 
the target in order to do things like detect open ports, web pages, services, and identify 
exploitable weaknesses you can use during the pentest. These actions may show up in 
logs, monitoring systems, or affect bandwidth utilization of the target. You should use 
this method carefully during a pentest unless you are not concerned about being detected, 
causing a disruption, or triggering incident response. Taking these actions outside of your 
contract may be prohibited or discouraged by local or regional laws. Port scanning, for 
example, has resulted in civil lawsuits or complaints to Internet service providers which 
may cost time, money, or resources for the pentester

****learn nmap options (-sT, -sS, -sU, etc)

p.98 Antivirus 
Antivirus (AV) bypasses are a constantly evolving game of cat and mouse. As attackers 
come up with new techniques, the AV vendors evolve products. Most AV products are 
still signature-based, which means they rely on a file fingerprint or a specific pattern 
match for detection. However, many have added behavioral-based detection components 
that can either do basic analysis on the host based on sequences of events or send samples 
to the cloud for analysis.
Being able to avoid AV detection is fundamental for post-exploitation. For testers, 
one of the most common attack tools is Metasploit. Using msfvenom, an attacker can 
generate payloads and create executables. However, the code is injected into a template, 
and that template is easily detected by most AV vendors. By using a different template, 
you have the ability to get past many of the AV scans. Black Hills Information Security 
has an excellent article detailing how to perform this type of attack: https://www
.blackhillsinfosec.com/advanced-msfvenom-payload-generation/
Many attackers are moving to C# for their exploits because it is more flexible for using 
PowerShell or direct system calls, for example, and they are easier to customize than 
C language–based exploits. C# uses assemblies instead of compiled code. This makes 
it easier for AV vendors to disassemble exploits and get the original code in order to 
perform string matches and conduct additional analysis. One easy way to evade string 
matching is to change the ProjectGuid, attribution artifacts, and then run ConfuserEx 
on the file to randomize names and variables. This is frequently sufficient to bypass 
signature-based controls.
Combining shellcode and C# is another option. Using C# the attacker can create 
an application that will inject shellcode into other processes or execute it directly. This 
way, data can be encoded or otherwise modified such that signature-based detections no 
longer match the exploit constructs. SpectreOps has a good blog post on this: https://
posts.specterops.io/offensive-p-invoke-leveraging-the-win32-api-from-managed-code7eef4fdef16d
PowerShell is another good way to bypass AV. Most AV products use Antimalware 
Scan Interface (AMSI) to detect malicious code in PowerShell. However, there are many 
well-known AMSI bypasses10 in PowerShell. Along with Script-Block Logging bypasses, 
this can mean that code can be executed in memory without additional scrutiny. Getting 
the data into PowerShell can happen via HTTPS, encoded or encrypted files, or whatever novel technique that you come up with. In the end, the lack of visibility is why this 
bypass technique is popular. 
Many behavioral technologies look for activities happening in sequence. By adding 
delays, splitting up work, or adding random tasks to the code, the behaviors may not 
appear related enough to trigger behavioral-based detections. This highly depends on the 
AV tool, however, so most testers will have a few different AV types that they test against 
in a lab with new techniques before they use something like this on an engagement. As 
always, if you come up with a new technique or bypass that you plan to use during an 
engagement, make sure that submissions are disabled in your AV test products and don’t 
submit your sample to online detection engines. Otherwise, these may no longer work 
when you need to use them! 

Vulnerability Research Sources
CVE
p.103
CVE defines vulnerabilities as “a weakness in computational logic found in software and 
hardware components that, when exploited, results in a negative impact to confidentiality, integrity, or availability.” CVE provides a list of identifiers for publicly disclosed 
vulnerabilities. Each CVE is maintained by the CVE Numbering Authority (CNA) and 
includes the following details:
•	 CVE ID (i.e., “CVE-2018-0001”)
•	 Brief description of the vulnerability
•	 References or advisories
CWE
p.104
CWE provides a list of common software security weaknesses and mitigations for implementing good secure coding practices and software design. CWE has over 700 common 
software security weaknesses that are broken up into three categories, which evaluate 
each problem from a different point of view:
•	 Research concepts Intended for academic research
•	 Development concepts Weaknesses encountered during software development
•	 Architectural concepts Weaknesses encountered during software engineering
There are other external mappings and helpful views for software security weaknesses, 
based on relevance (Top 10 for SANS) or specific criteria, such as “Weaknesses in Mobile 
Applications,” which shows relationships in security weaknesses found in mobile applications. An Android or iOS developer could reference this view as lessons learned and 
implement best practices or to build a formal test plan for the application. Similar to a 
CVE, each CWE includes a basic set of identifiers for each listing:
•	 Weakness ID (i.e., “CWE-941”)
•	 Description of the weakness
•	 Extended description of the weakness
•	 Relationships to other views (i.e., research, development, architectural, etc.)
•	 Modes of introduction (when the weakness is introduced)
•	 Applicable platforms (software languages, operating systems, etc.)
•	 Common consequences (i.e., scope, impact, and likelihood)
•	 Likelihood of exploit
•	 Potential mitigations
•	 Memberships (shows additional categories or views that reference this weakness)

p.112 •	 Waterholing If an attacker knows the websites an organization frequents, the 
attacker could infect the web pages in the site with malware.
•	 DNS spoofing An attack method used to impersonate a victim’s DNS server, 
forcing them to navigate to a malicious website.
•	 DNS cache poisoning The DNS resolver cache is overwritten on the DNS 
server with a malicious web address, and the user will receive the malicious site 
instead of the intended one. 

p.124 Hashing
Common Algorithm Purpose Digest Size/Length Common Application
MD5 Integrity 128 bits
32 characters
Password authentication
SHA-1 Integrity 160 bits
40 characters
Password authentication
SHA-256 Integrity 256 bits
64 characters
Password authentication
Encryption
Common Algorithm Purpose Key Size Common Application
AES Symmetric key 128 bits
192 bits
256 bits
Encrypting and decrypting 
sensitive information
Triple DES Symmetric key 56 bits
112 bits
168 bits
Encrypting and decrypting 
sensitive information
RSA Asymmetric key 1,024 bits
2,048 bits
Authentication
Nonrepudiation
DSA Asymmetric key 1,024 bits
2,048 bits
Authentication
Nonrepudiation

p.126 DoS Attack 
Pattern CAPEC ID Target Definition
Flooding CAPEC-125 Network 
service
An adversary consumes the resources of 
a target by rapidly engaging in a large 
number of interactions with the target.
Excessive 
allocation
CAPEC-130 Memory 
allocation
An adversary causes the target to allocate 
excessive resources to servicing the 
attacker’s request, thereby reducing the 
resources available for legitimate services 
and degrading or denying services. 
Resource leak 
exposure
CAPEC-131 Memory 
leaks
An adversary utilizes a resource leak on the 
target to deplete the quantity of the resource 
available to service legitimate requests. 
Sustained client 
engagement
CAPEC-227 Algorithmic 
flaws in code
An adversary attempts to deny legitimate 
users access to a resource by continually 
engaging a specific resource in an attempt 
to keep the resource tied up as long as 
possible. The intent is not to crash or flood 
the target.

p.127 Flooding 
Technique CAPEC ID Definition
TCP flood CAPEC-482 An adversary may execute a flooding attack using the TCP 
protocol with the intent to deny legitimate users access 
to a service. These attacks exploit the weakness within the 
TCP protocol where there is some state information for the 
connection the server needs to maintain.
UDP flood CAPEC-486 An adversary may execute a flooding attack using the User 
Datagram Protocol (UDP) with the intent to deny legitimate 
users access to a service by consuming the available network 
bandwidth. Additionally, firewalls often open a port for each 
UDP connection destined for a service with an open UDP 
port, meaning the firewalls in essence save the connection 
state; thus, the high packet nature of a UDP flood can also 
overwhelm resources allocated to the firewall.
ICMP flood CAPEC-487 An adversary may execute a flooding attack using the Internet 
Control Message Protocol (ICMP) with the intent to deny 
legitimate users access to a service by consuming the available 
network bandwidth. A typical attack involves a victim server 
receiving ICMP packets at a high rate from a wide range of 
source addresses.
HTTP flood CAPEC-488 An adversary may execute a flooding attack using the HTTP 
protocol with the intent to deny legitimate users access to 
a service by consuming resources at the application layer, 
such as web services and their infrastructure. These attacks 
use legitimate session-based HTTP GET requests designed to 
consume large amounts of a server’s resources.
SSL flood CAPEC-489 An adversary may execute a flooding attack using the 
Secure Sockets Layer (SSL) protocol with the intent to deny 
legitimate users access to a service by consuming all the 
available resources on the server side. These attacks take 
advantage of the asymmetric relationship between the 
processing power used by the client and the processing 
power used by the server to create a secure connection.
XML flood CAPEC-528 An adversary may execute a flooding attack using Extensible 
Markup Language (XML) messages with the intent to deny 
legitimate users access to a web service. These attacks are 
accomplished by sending a large number of XML-based 
requests and letting the service attempt to parse each one.
Amplification CAPEC-490 An adversary may execute an amplification where the size of a 
response is far greater than that of the request that generates 
it. The goal of this attack is to use relatively few resources to 
create a large amount of traffic against a target server.

p.128 . Imperva organizes DoS 
and DDoS attacks into three categories:
•	 Volume-based attacks Saturate the bandwidth and are measured in bits 
per second (Bps)
•	 Protocol attacks Consume server resources and are measured in packets 
per second (Pps)
•	 Application-layer attacks Crash a service and are measured in requests 
per second (Rps)

p.134 Virtual local area networks (VLANs) are broadcast domains used to provide logical 
separation on the same physical network segment. A VLAN is referenced under IEEE 
802.1Q. A network switch groups ports together into a VLAN group and uses a VLAN 
ID to identify the VLAN. On a switch, a port can either be an access port or a trunk port. 
A trunk port is designated on a switch to carry VLAN-tagged traffic between switches. 
An access port sends and receives untagged traffic and is assigned to a single VLAN 
(access ports are typically for a host-to-switch connection). VLAN tags restrict access to 
tagged traffic to only ports designated to a particular VLAN group. VLAN hopping is an 
attack vector used to gain access to resources on another VLAN. Two methods are used 
to accomplish VLAN hopping: switch spoofing and double tagging

p.135 There are three methods a pentester can use to bypass NAC:
•	 Violating trust relationships An example would be spoofing a source IP or 
MAC address of a valid device (e.g., legacy printer) controlled in a distinct NSG 
that doesn’t support 802.1x authentication. You can do this with the macchanger 
application in Kali Linux, for example: 
(kali kali)-[~]# ifconfig eth0 down
(kali kali)-[~]# macchanger -m 00:d0:70:00:20:69 eth0
(kali kali)-[~]# ifconfig eth0 up
•	 Exploiting implementation weaknesses This includes weak authentication 
mechanisms in wireless protocols or even DHCP-based NAC solutions, where 
the attacker can possibly bypass the NAC protection altogether by assigning a 
static IP address on the network instead of trying to get one through DHCP.
•	 Taking advantage of configuration weaknesses An example would be if NAC 
enforces policy on IPv4 addresses but is not configured to protect IPv6 addresses. 

p.144 The PenTest+ exam objectives cover wireless and radio frequency (RF)–based vulnerabilities and exploits. In this chapter, we will focus on some of the basics a pentester 
needs to know about wireless network protocols found in the 802.11 (routers and access 
points), 802.15 (Bluetooth), radio frequency ID (RFID), and near field communications (NFC) technologies. We will investigate various tools for interacting with wireless 
devices, conducting discovery, and ways to attack wireless devices.

p.148 Wireless Security and Encryption Standards
wps
wep
wpa

p.169 Primary Layers of Bluetooth
Bluetooth contains multiple layers in its protocol stack. The following are the 
primary layers of the stack:
•	 SDP Service Discovery Protocol discovers Bluetooth services offered from 
other devices within range. 
•	 LMP Link Managing Protocol keeps track of connected devices.
•	 L2CAP Logical Link Control and Adaptation Protocol provides data 
services to upper layers of the Bluetooth protocol stack.
•	 RFCOMM Radio Frequency Communication uses L2CAP to provide 
emulated serial ports to other devices.
•	 TCS Telephony Control Protocol uses L2CAP and provides telephone 
functionality

p.230 cloud-centric attacks: DDoS, volumetric DDoS, direct-to-origin attacks,
cloud malware injection, side-chennel attacks, Software Development Kits

p.238 There are four classifications of jailbreaks:
•	 Untethered The device can be powered on and off without the help of a computer.
•	 Tethered A computer and software are required to boot the jailbroken device 
each time.
•	 Semi-tethered If the device is rebooted, you will need to jailbreak the device 
again to patch the kernel using a computer.
•	 Semi-untethered This is the same as semi-tethered but can be accomplished 
using the jailbreak app that is already installed on the device.

p.242 The primary components of an Android application are
•	 Activities Parts of the application the user can see
•	 Fragments A behavior that is placed in an activity
•	 Intents Used for sending messages between other components
•	 Broadcast receivers Allow an application to receive notifications from other apps
•	 Content providers A SQLite database to store data in the form of a flat file
•	 Services Used to start intents, send notifications, and process data

p.262 A significant benefit of SCADA networks is alarm handling. Sensors deployed through 
the network will monitor conditions to ensure proper functionality. If the sensor indicates a change in normal operation, it can fire off an indicator and generate an alert in 
the system, and a human operator can manage the response. As shown in Figure 7-9, a 
SCADA system can be made up of multiple components, including:
•	 Supervisory workstation A computer or console, which is the core of the 
system that gathers data and sends commands to connected devices, such as 
RTUs and PLCs. 
•	 Remote terminal unit (RTU) Strategically placed on the network, close to the 
process being managed, and converts sensor signals and relays digital data back to 
the supervisory system.
•	 Programmable logic controller (PLC) Similar to RTUs, but with more 
sophisticated logic and configuration capabilities. 
•	 Communication infrastructure Connects devices and facilitates 
communications using popular SCADA protocols such as DNP3 (UDP based) 
and ModBus (TCP based). 
•	 Human-machine interface (HMI) Operator application (typically a graphical 
user interface) installed on the supervisory system that is used to monitor and 
manage the supervisory control system.

p.264 Some embedded 
systems provide a user interface that closely resembles modern-day operating systems, 
called a real-time operating system (RTOS), which is a stripped-down version of commonly deployed operating systems, such as Linux and Microsoft Windows.
An RTOS is required to adhere to deadlines associated with tasks, regardless of what 
happens in the system. Some common RTOSs are LynxOS, OSE, QNX, Real Time 
(RT) Linux, VxWorks, and Windows CE (WinCE). There are three classifications of 
RTOSs: hard, firm, and soft. A hard RTOS must strictly adhere to time constraints for 
the associated task. Availability and time to react are extremely important in the design 
of these systems. In a medical application, such as a pacemaker, the device stimulates 
the heart muscle at just the right time. If the task is completed too late or too soon, the 
patient’s life could be at risk. Firm and soft RTOSs are still time sensitive; however, they 
offer some flexibility, as missing a deadline may cause undesirable effects but nothing 
catastrophic. Since most of the RTOSs are built from recycled code or existing operating systems, they are not exempt from known vulnerabilities. 

p.276 There are a number of ways to influence someone to get them to do what you want them 
to do. CompTIA has identified motivational techniques that can be used to exploit a 
target’s trust. The Social Engineering Framework (https://www.social-engineer.org) provides definitions and examples for each type of influential tactic:
•	 Authority This can be performed in a legal (impersonating an officer of the 
law), organizational (impersonating a business leadership official), or social
(dominant figure in a group of one’s peers) leadership role to gain access to 
property or controlled information.
•	 Scarcity This can make something more desirable to a target. When time is 
made scarce, it can create a feeling of urgency to influence one’s decision-making 
logic. False statements can be used to persuade someone to do something because 
it sounds important and there is little time to act, such as “This sale ends today. 
Act now before it’s too late!”
•	 Social proof This describes a specific social phenomenon regarding outsiders 
seeking conformity based on group behavior. Think about a situation you’ve been 
in when you had absolutely no idea what was appropriate. You might have looked 
around to see what other people were doing. You assume they know what’s going 
on, so you do what they do in order to conform and make it seem as though you 
weren’t clueless. This is social proof.
•	 Likeness This approach takes advantage of the psychological concept that 
people are often more willing to help someone they like. This can be someone 
who is beautiful or familiar, or someone who provides plenty of flattery to the 
target. In essence, this is establishing rapport.
•	 Fear This approach attempts to strike fear into the target. An example would 
be using malware (scareware) to influence someone’s decision to purchase or 
download fake antivirus programs or other software with malicious intent.

p.302 The Security Accounts Manager (SAM) database file contains local account settings and 
password hashes for the host. You can use the net user command at the Windows 
command prompt to list the local user accounts. You can retrieve the contents of the 
SAM file using specific in-memory techniques, which are automated using the following tools:
•	 SamDump2
•	 LaZagna
•	 secretsdump
•	 pwdumpx.exe
•	 gsecdump
•	 Mimikatz

p.306 The Local Security Authority Subsystem Service (LSASS) is used to store credentials 
in memory after a user successfully logs in to a system. The credentials may be an NT 
LAN Manager (NTLM) password hash, LM password hash, or even a cleartext password. 
This helps make credential sharing between trusted applications efficient and not require 
the user to enter a user and password every time authentication is required. The Security 
Support Provider (SSP) is a dynamic linked library (DLL) that makes one or more security packages accessible to applications. The Security Support Provider Interface (SSPI) 
operates as an interface to SSPs and helps facilitate access to the stored credentials.
Some of the SSPs documented within the MITRE ATT&CK matrix that are allowed 
to access the subsystem are
•	 Msv Authentication package: interactive logons, batch logons, and service logons
•	 Wdigest The Digest Authentication protocol is designed for use with Hypertext 
Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) 
exchanges
•	 TSPkg Web service security package
•	 Kerberos Preferred for mutual client-server domain authentication in Windows
•	 CredSSP Provides single sign-on (SSO) and network-level authentication for 
Remote Desktop Services

p.330 Living Off the Land
Living off the land (LOL) is the concept of using tools that already exist on a system 
in order to exploit them without being detected. Simple examples include the use of 
SSH for Linux or Remote Desktop Protocol for Windows. There are two reasons this 
approach has merit. The first reason is that this makes it easier to blend in with normal 
system activities. By itself, this should make sense. The second reason, and this is the true 
spirit of LOL, is never having to write your tools to disk. You see, when you run many 
attack tools (such as Metasploit), they leave behind files that may need to be cleaned up 
after testing is finished. More importantly, each time you have to transfer a tool or write 
something to disk, it gives security software the opportunity to detect it. Therefore, you 
may also hear the technique of not writing to disk referred to as “fileless malware.”

p.359 These recommendations apply to security that is enforced automatically as a result of 
systems settings or software. Make sure your recommendations fall within the operating parameters for the systems in question. Some systems cannot implement long or 
complex passwords, for example. Here are some technical control recommendations and 
when you might use them:
•	 System hardening is the process of applying system settings and configurations 
designed to reduce a system’s vulnerability to attack. This recommendation 
reduces the system attack surface when you see unnecessary service exposure, 
guest accounts, and default passwords.
•	 Sanitizing user-controlled inputs and parameterizing queries can help prevent 
injection attacks.
•	 Implementing multifactor or password-less authentication can reduce the risk of 
exposed login interfaces and weak passwords.
•	 Password encryption can reduce the impact for systems that are compromised in 
other ways. If passwords are encrypted with a strong algorithm and with secure 
implementation of encryption, it makes it more difficult for an attacker to use 
those credentials for subsequent attacks.
•	 Application whitelisting may be appropriate in an environment where upload 
and execution of binaries are particularly easy during the pentest.
•	 Patch management may be a challenge for the company if you are able to identify 
many known-exploitable vulnerabilities that should have been patched. However, 
not all systems can be patched because of stability concerns, and network 
segmentation is sometimes required.
•	 Password and key rotation should be recommended if very old passwords or 
keys are identified in the environment. This poses a risk from any previous data 
exposure, as well as from former staff.
•	 Standardizing and automating a process for managing the certificate lifecycle should 
be recommended when expired or misused certificates are identified during testing.
•	 Secrets management applies to securing certificates, auth keys, and passwords. 
This is a solid recommendation when you find passwords stored in plaintext or 
when you identify keys or certificates in insecure locations during a pentest.
•	 Network segmentation helps reduce the potential impact of compromise by 
limiting an attacker’s ability to perform lateral movement and eavesdrop on 
network traffic.

p.360 Here are some 
administrative controls recommendations and when you might use them.
•	 Role-based access control (RBAC) establishes what a person is allowed to 
access based on their job role. This can mitigate vertical privilege escalation. 
Recommendations for RBAC come into play when the principle of least 
privilege is inconsistently applied across accounts, especially with those sharing 
similar job roles.
•	 SDLC security protects the organization against attacks on code they develop 
or use within the enterprise. This extends to supply chain attacks against 
code that the organization may use as dependencies and insider threats. This 
recommendation helps if you find cases where source code is easily modified 
(and the change goes undetected), if you are able to gain access to continuous 
integration or continuous delivery (CI/CD) infrastructure during a pentest, or if 
software dependencies lack appropriate integrity checking.
•	 Password requirement best practices are policies or standards that determine 
what the technical controls must implement. While technical controls may exist 
and be in use, if they are not required to meet a reasonable bar for security, the 
organization may remain vulnerable to brute-force guessing and dictionary attacks.

p.362 Vulnerabilities can be introduced by missing patches, improper handling of usercontrolled inputs in applications, and common system misconfigurations, among others. 
Here are some examples of common themes and root causes you might encounter:
•	 Inconsistent patching and configuration management 
•	 Insecure code reuse
•	 Insecure data handling practices
•	 Weak/improper use of encryption
•	 Vulnerable application components
•	 Ineffective or missing network segmentation
•	 Inadequate privilege segmentation
•	 Not following the principle of least privilege
•	 Insufficient monitoring or incident response processes
•	 Password reuse or account sharing
•	 Weak authentication and authorization management
•	 Lack of best practices, such as secure benchmarks and controls 
(https://www.cisecurity.org/cybersecurity-best-practices/)